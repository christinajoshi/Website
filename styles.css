/* TODO:  When narrower screen size, make it so one image is after the other */

/* TODO: may want to add margin: 0 and padding: 0 */
*{
    list-style: none; /* removes bullet points from each list item */
    text-decoration: none; 
    font-family: 'Merriweather', serif
}

:root {
    /*-- #8990BD; #BD8990; #ffe082; #BD89AA;*/
    --taupe: #AC9688 
}

/* Sticky footer */
html{
    height: 100%;
    scroll-behavior: smooth;
}

nav{
    padding-top: 1rem; /* puts space at the very top, above the nav. this one is important, definitely want to do */
    /* background: var(--NavBackground) */
}

/* TODO: nav disappears on scroll - want to change that? */
nav ul{
    display: flex;
    justify-content: flex-end;
}

nav li{
    list-style: none;  /* removes bullet points from each list item */
     
}

nav a{
    padding: 0.5em 1em; /* around each link top and bottom */
    border: 1px solid transparent; /* transparent border, so when hover over links, they don't move */
    text-decoration: none; /* gets rid of underline */
    color: #000; /* darkens the text when hover */
    opacity: 0.6;
}

/* margin-right: auto pushes the Home link (a flexbox item) to the left. Setting a margin to auto will cause the item to take up as much space in that direction as they can 
    note: flexbox was set to justify-content: end which pushes all the items to the right. This, in a way, overrides that for this one item */
    .flex-item-home{
        margin-right: auto;
    }

/* pseudo-classes - used to define a special state of an element */
nav a:hover,nav a:focus{
    /* border: 1px solid black;  gives it a black border on hover */
    opacity: 1;
    background: #ffe082;
}

/* Sticky footer */
main{
    min-height: 100%;
}

/*h1, h2{
    font-family: 'Alegreya', serif;
}*/

p{
    font-family: 'Source Sans Pro', sans-serif; /*  'Open Sans', sans-serif; */
}

/* Header section: One of my favorites -> Explore More link */
.header{
    margin: 0 auto 45px; /* margin: 0 auto -> bumps the header to the left and margin: 0 auto 80 px -> give you bottom margin... Three values: top, right and left, then bottom */
    max-width: 90vw; 
    font-family: 'Merriweather', serif;
}

/* Explore More link. You also gave it an id="exploreMoreLink" */
.header a{
    padding: 0.5em 1em;  /* top and bottom having 0.5em | left and right have 1em. there's also short-hand padding with 3 values */
    background: var(--taupe);
    color: black;
    /*font-family: myIPA;*
}

#exploreMoreLink{
    position: relative;
    text-decoration: none;
    /*display: inline-block;*/
}

#exploreMoreLink:hover{
    color: #000;
}

/* ::before Selector. Insert before the link */
#exploreMoreLink::before{
    content: "";
    position: absolute;
    width: 100%;
    height: 2px; /* the height of the underline */
    bottom: 0;
    left: 0;
    background-color: #000;
    visibility: hidden;
    transform: scaleX(0);
    transition: all 0.3s ease-in-out 0s;
}

#exploreMoreLink:hover::before{
    visibility: visible;
    transform: scaleX(1);
}

#featureImage{
    /*border-radius: 5px; was rounding the corners of the image */
    cursor: pointer;
    transition: 0.3s;
}

#featureImage:hover{
    opacity: 0.7;
}

/* the modal's background/the container*/
/* this works with flex too:
display:flex;
justify-content: center;
align-items: center;
*/
.modal{
    display: none;
    position: fixed;
    z-index: 10;
    /*padding-top: 100px;*/
    padding-top: 20vh; /* this padding was on the image. too high and it was covering up the X to close */
    left: 0;
    top: 0;
    width: 100%;  
    height: 100%; 
    overflow: auto;  /* controls what happens to content that is too big to fit into the area; scrollbar automatically attached to my image */
    /* background-color: rgb(0,0,0);  don't need */
    background-color: rgba(0,0,0,0.9);  /* red, green, blue, and last number is alpha and it's for opacity. 0.0 fully transparent and 1.0 fully opaque */
}

.modal-content{
    margin: auto;
    display: block;
    width: 70vw;
    height: 70vh;
    object-fit: contain;
}

#caption {
  margin: auto; 
  display: block;
  width: 80%;
  max-width: 700px;
  text-align: center;
  color: #ccc;
  /*padding: 10px 0;  top/bottom AND left/right */
  /*padding: 2px 0 0 0;*/
  /* height: 150px; */
}

/* for iPhone 5; caption was getting caught off at the bottom and padding top affects how far image is from top of screen */
@media only screen and (max-width:640px){
    .modal{
        padding-top: 17vh;
    }
}

/* if screen gets smaller than this, the header bunches up 
@media only screen and (max-width:700px){
    .modal{
        padding-top: 17vh;
    }
}*/

 /*Add Animation - Zoom in the Modal */
.modal-content, #caption {
  animation-name: zoom;
  animation-duration: 0.6s;
}

@keyframes zoom {
  from {transform:scale(0)}
  to {transform:scale(1)}
}

 /*The Close Button */
.close {
  position: absolute;
  top: 15px;
  right: 35px;
  color: #f1f1f1;
  font-size: 40px;
  font-weight: bold;
  transition: 0.3s;
}

.close:hover,
.close:focus {
  color: #bbb;
  text-decoration: none;
  cursor: pointer;
}



/* margin: 0 gets rid of slight margin/padding on all sides (top, right, bottom, left) that was on the left, now it's pushed up directly against the left side of page */
body {
    background: #fff; /* #728C45 #FBECEF #D4DFBB #D3DFCD #728C45 */
    font-family: sans-serif;
    margin: 0; 
}

/*.hero{
    display: grid; 
    grid-template-columns: 7vw 40vw 20px 80px 1fr; 
    grid-template-rows: 7vw auto 20px auto; 
    margin-bottom: 80px;
    max-width: 1024px;  limit the size of the grid. don't like how this is working 
}*/

/* bring the grid in at a point where you have enough room to make it look reasonable. have nice source order of elements, so when smaller width, will just lay out    one after the other without the grid and look nice */
.hero{
    margin-left: 5vw;
    margin-right: 5vw;
    margin-bottom: 80px;
    font-family: 'Merriweather', serif;
    /* max-width: 900px; wasn't expanding to fit entire page */
}

/* for browsers that don't support new grid specs. i10 and i11 only support old grid specs 
   when grid layout comes across a floated img, it becomes a grid item and the float is thrown away because grids don't have floats, but other properties remain like width and is supported
   TODO: finish float layout. below is float only for the hero img 
   Note: don't try to replicate grid layouts with floats/javascript, just keep the float layout simple. too much code javascript and these browsers that don't support grid are not that great with javascript either */
.hero img{
    float: left;
    width: 40%; /* giving it a width because it wouldn't be constrained */
}

/* Gaizer popup */
.tooltip{
    position: relative;
    display: inline-block; 
}

.tooltip .tooltiptext{
    visibility: hidden;
    width: 10vw; /* TODO: may want to change to vw */
    background-color: black;
    color: #fff;
    text-align: left;
    margin-left: 28px; 
    border-radius: 6px;
    padding: 5px 5px; /* top bottom */
    
    /* position of tooltip */
    position: absolute;
    z-index: 5; /* element with highest number is on top */
}

.tooltip:hover .tooltiptext{
    visibility: visible;
}

/* TODO: Do I need the below for the modal? 
100% Image Width on Smaller Screens 
@media only screen and (max-width: 700px){
  .modal-content {
    width: 100%;
  } */

/* this is a feature query, you can throw all your grid stuff here
/* detect if browser supports grid layout. hey browser if support grid, set width (40%) back to 100% */
@supports(display: grid){
    .hero img{
        width: 100%;
    }
}

/* */
@media (min-width: 650px){
    .hero{
        display: grid;
        grid-template-columns: 7vw 40vw 20px 60px 1fr; /* can use any length unit */
        grid-template-rows: 7vw auto 20px auto; /* top, right, bottom, left */
        margin-left: 0;
    }
}
/* for smaller devices */
@media (max-width: 650px){
    nav ul{
    display: flex;
    justify-content: center;
    margin-right: 10vw;
    }

    /* shifting 'The Geysers' text below the hero image, so giving the image a margin-bottom, so text isn't right against it */
    .hero img{
        width: 100%;
        margin-bottom: 1em;
    }

    /* TODO: move this to the left. If can't find a way, delete this */
    .panel-intro{
        margin-left: 0;
        background-color: #FFFDD0;
    }

    .small-nav{
        padding-top: 1rem; /* puts space at the very top, above the nav, is how it appears. this one is important, definitely want to do */
        margin-bottom: 60px;
    }

    .large-nav{
        display: none;
    }
}

/* larger devices */
@media(min-width: 650px){
 
    .small-nav{
        display: none;
    }
   .large-nav{
        padding-top: 1rem; /* puts space at the very top, above the nav, is how it appears. this one is important, definitely want to do */
        margin-bottom: 80px;
    }
}

/* pseudo-element */
.hero::after{
    content: ' ';
    background: var(--taupe);
    grid-column: 2 / 4;
    grid-row: 2 / 4;
    z-index: 1; /* z-index property sets the stack order of an element. element with larger number is in front of element with smaller number */
}

.hero img{
    grid-column: 1 / 3;
    grid-row: 1 / 3;
    z-index: 2;
    max-width: 100%; /* will overflow, unless give it a max-width: 100% because in grid layout they size down to the grid area that you put them in */
    cursor:pointer; /* zoom-in is also a good value for the cursor property. there are no mobile browsers that support the cursor property */
    transition: 0.1s;
}

.hero img:hover{
    opacity: 0.8;
}

/* G in gaizer */
.hero-content p:nth-of-type(2)::first-letter{
    font-size: x-large;
}

/* use negative number to get to end of the grid. Ex. -2 will be second end line of the grid. Can do this when define explicit grid with
    grid-template-columns and grid-template-rows. this helps if you ever make changes to the grid; adding or deleting row, you don't have to change this value as well */
.hero-content{
    grid-column: 5;
    grid-row: 2 / -1; 
}

.panel-intro{
    margin-bottom: 40px;
    margin-left: 10vw;
    font-family: 'Merriweather', serif;
    /* max-width: 25vw; */
}

.panel{
    display: grid;
    gap: 25px;
    grid-template-columns: repeat(3,1fr); /* 3 columns, each 1 fr */
    grid-template-rows: 325px 325px; /* getting rid of third row of 100px */
    max-width: 80vw;
    margin: 0 auto 80px; /* margin: 0 auto -> centers it */
}

/* object fit */
.panel img{
    height: 100%;
    width: 100%;
    object-fit: cover; /* crops outside of image, so it fits into the box and maintains image ratio. if don't want image cropped, used object-fit: contain and the 
                          images will just keep getting smaller and smaller ratio maintained */
}

.panel img:nth-child(2){
    grid-column: auto / span 2; /* originally, pictures lined up next to each other in row. Now, 1 and 2 pics on same line, and 2 pic is spanned across 2 columns */
}


.panel img:nth-child(3){
    grid-column: auto / span 2;
    /*grid-row: auto / span 2; didn't look as good when spanning into another row */
}

#goToLink{
    text-decoration: none;
    color: #A0BA8B;
    text-align: center;
}

.footer{
    /*background-color: #1F4954; #F7EEE5; #F8F3EF;*/
    /*height: 100px;*/
    padding: 20px;
    background-color: #E5E5E5;
    margin-top: auto; /* Sticky footer. Pushes it as far as it can from its neighboring element */
    margin-bottom: 0;
}

.footer ul{
    display: flex;
    justify-content: space-around;
}

.footer li{
    list-style: none;
}

.footer a{
    padding: 0.5em 1em;
    border: 1px solid white;
    text-decoration: none;
    color: white;
}

.footer a:hover, .footer a:focus{
    background: white;
    color:black; 
}











